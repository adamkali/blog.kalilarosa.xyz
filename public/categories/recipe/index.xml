<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Recipe on Yet another trashy dev blog</title><link>https://blog.kalilarosa.xyz/categories/recipe/</link><description>Recent content in Recipe on Yet another trashy dev blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sat, 06 Sep 2025 17:36:04 -0500</lastBuildDate><atom:link href="https://blog.kalilarosa.xyz/categories/recipe/index.xml" rel="self" type="application/rss+xml"/><item><title>autogroup</title><link>https://blog.kalilarosa.xyz/configs/glaze-me/</link><pubDate>Fri, 05 Sep 2025 11:11:22 -0500</pubDate><guid>https://blog.kalilarosa.xyz/configs/glaze-me/</guid><description>&lt;h1 id="get-glazed-like-the-goat-it-will-not-have-any-consequences">Get Glazed like the Goat, It will not have any consequences.&lt;/h1>
&lt;p>I find that one thing that anyone would love to have is a bot whose only job is to glaze you.
So the goal of this recipe is to do just that, but also give you some tips about how to use neovim.
First make a lua file called glaze-me.lua, or call it anything you like.
It should be in your &lt;code>after/plugin&lt;/code> directory.&lt;/p></description></item><item><title>norbsidian</title><link>https://blog.kalilarosa.xyz/configs/norbsidian/</link><pubDate>Thu, 04 Sep 2025 23:59:05 -0500</pubDate><guid>https://blog.kalilarosa.xyz/configs/norbsidian/</guid><description>&lt;h1 id="this-is-some-expert-tier-exporting">This Is some expert tier exporting&lt;/h1>
&lt;p>So one thing I had a problem with is getting my neorg notes to export to obsidian without manually having to specify the directory that it will be exported to. So here is a recipe for a script that I wrote for my neovim config that does just that.&lt;/p>
&lt;h2 id="pragma">Pragma&lt;/h2>
&lt;p>We start offcreate some tables and load in some libraries&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-lua" data-lang="lua">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">local&lt;/span> &lt;span class="n">norbsidian&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">local&lt;/span> &lt;span class="n">builtins&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;telescope.builtin&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">local&lt;/span> &lt;span class="n">pickers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;telescope.pickers&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="i-am-now-going-to-define-this-here-class-and-function">I am now going to define this here class and function&lt;/h2>
&lt;p>Now the NorbOptions class is a secret mousekatool to use later more on that later, but the norbsidian_export_template function just takes the inputs and gives us a pure function that will always generate the proper export.&lt;/p></description></item></channel></rss>